#!/bin/bash

# Backs up running Libvirt virtual machines by creating snapshots.

# Based on http://wiki.libvirt.org/page/Live-disk-backup-with-active-blockcommit
# Disclaimer: this script could destroy your data! Don't use without testing first!
# Features:
#  * Can back up one VM or all running VMs (with --all)
#  * If a VM has multiple block devices, all will be backed up
#  * The backups will be sparse files, to save space

# Requirements on RHEL/Centos: to make live snapshots, you need a Qemu version 
# from the centos-release-qemu-ev repo.
#   yum -y install centos-release-qemu-ev
#   yum -y install qemu-kvm-ev
# And then reboot your VM host... A restart of libvirt is not enough.
# Best practice; install the qemu-guest-agent on your virtual machine(s).
#   yum -y install qemu-guest-agent

# Restore procedure:
# 1. Copy back disk image(s):
#   root@vmhost:~ # cp /var/lib/libvirt/images/backups/myvm.img /var/lib/libvirt/images/
# 2. Re-create the VM:
#   root@vmhost:~ # virsh define /var/lib/libvirt/images/backups/myvm.xml 
#   Domain myvm defined from /var/lib/libvirt/images/backups/myvm.xml
#   root@vmhost:~ # virsh start myvm
#   Domain myvm started

# Known issue:
# - During snapshot, the VM may freeze for a while. This might interrupt connections.

# Changelog
# 2017-07-26 - Initial version - Onno
# 2017-07-27 - Code improvements - Onno
# 2017-07-27 - Copies will be sparse files - Onno
# 2017-07-27 - VM XML will be backed up too - Onno
# 2017-07-29 - Besides Qcow2 also support for raw images - Onno
# 2017-08-23 - Add exclude option and change of parsing user arguments - Tom
# 2017-08-24 - Extend exclude option with a file & command-line argument option - Tom
# 2021-04-19 - Restore original state when interrupted - Onno


##############################################################
#   Not really changeable variables
##############################################################
# Script name
MYNAME=`basename $0`
# Hostname
MYHOST=`/bin/hostname -s`
# Name suffix for the overlay files
SUFFIX='-libvirt-live-backup-overlay'

##############################################################
#   Help Function
##############################################################

show_help() {
    echo
    echo " Usage: $MYNAME [ -s | -a | -e | -f | -t | -d | -h ]"
    echo "  -a | --all       : Backup all servers"
    echo "  -d | --debug     : Debug mode"
    echo "  -e | --exclude   : Exclude list, comma separated"
    echo "  -f | --file      : File with an exclude list, comma or newline separated"
    echo "  -s | --single    : Backup a single server (string)"
    echo "  -t | --targetdir : Target dir (Location to back up to.)"
    echo "  -h | --help      : Show this menu"
    echo
    echo " Examples: $MYNAME -s test-vm -t /var/lib/libvirt/backups/ "
    echo "           $MYNAME -a -f /etc/exclude_vms_from_backup -t /var/lib/libvirt/backups/ "
    echo "           $MYNAME -a -e 'vm1,vm2,vm3' -t /var/lib/libvirt/backups/ "
    echo
    echo " Overview of running VMs"
    virsh list --all
}

##############################################################
#   Basic checks
##############################################################

# Read the given arguments
while [[ $# > 0 ]]
do
    key="$1"
    case $key in
        -d|--debug )    DEBUG="1"
                        shift # next argument
                        ;;
        -s|--single)    SINGLE="$2"
                        shift # next argument
                        ;;
        -a|--all)       ALL="1"
                        ;;
        -e|--exclude)   EXCLUDE_LIST="$2"
                        shift # next argument
                        ;;
        -f|--file)      EXCLUDE_FILE="$2"
                        shift # past argument
                        ;;
        -t|--targetdir) TARGETDIR="$2"
                        shift # next argument
                        ;;
        -h|--help)      show_help
                        exit
                        ;;
        * )             echo "Invalid Argument given: $1 "
                        show_help
                        exit 1
                        ;;
    esac
    shift # next argument or value
done

# Check for --single or --all argument
if [ -z "$SINGLE" ] && [ -z "$ALL" ] ; then
    echo "Please specify a VM to back up with --single, or specify --all to backup all VMs."
    show_help
    exit 1
fi

# Check of target location is defined
if [ -z "$TARGETDIR" ] ; then
    echo "Please specify a location to back up to."
    show_help
    exit 1
fi

# Use the exclude file when it is specified, otherwise check for a exclude list from the command line
if [ -n "$EXCLUDE_FILE" ] && [ -f "$EXCLUDE_FILE" ]; then
    EXCLUDED_VMS=$(cat "$EXCLUDE_FILE" | tr "," "\n")
elif [ -n "$EXCLUDE_LIST" ]; then
    EXCLUDED_VMS=$(echo "$EXCLUDE_LIST" | tr "," "\n")
fi

##############################################################
#   Functions
##############################################################

get_block_devs() {
  VM="$1"
  # List the block devices (vda etc.) for a domain.
  virsh domblklist "$VM" --details | awk '$2 == "disk" {print $3}'
}

get_snapshot_backing_files() {
  # virsh does not seem to have a command to get the backing files of a snapshot.
  # virsh domblklist only lists the overlay files when a snapshot has been made;
  # not the actual files we want to back up.
  # So we need to extract the backing files from the VM XML output.
  VM="$1"
  virsh dumpxml "$VM" \
  | sed -n "/<backingStore type='file'/,/<\/backingStore>/ { /source file/p }" \
  | sed -e "s/.*<source file='\(.*\)'\/>.*/\1/g"
}

copy_xml() {
  VM="$1"
  xmlfile=$(mktemp)
  echo "Copying the XML definition of '$VM'..."
  virsh dumpxml "$VM" > "$xmlfile"
  rsync --archive "$xmlfile" "$TARGETDIR/$VM.xml"
  rm -f "$xmlfile"
  echo "Done."
}

create_vm_snapshot() {
  VM="$1"
  if virsh domblklist "$VM" --details | grep 'disk' | egrep -v '\.(qcow2|img)$' ; then
    echo "ERROR: this VM contains a disk format that has not been tested."
    exit 1
  fi
  diskspecs=$(virsh domblklist "$VM" --details \
              | awk '$2 == "disk" {print "--diskspec " $3 ",file=" $4}' \
              | sed -e "s/\.\(qcow2\|img\)$/$SUFFIX.\1/" \
              | tr '\n' ' ')
  # First try with --quiesce to get more consistent snapshot; if that fails, try without; if that failes, quit.
  virsh snapshot-create-as --domain "$VM" \
                           --name "$VM-snapshot" \
                           $diskspecs \
                           --disk-only --atomic --quiesce \
  || virsh snapshot-create-as --domain "$VM" \
                           --name "$VM-snapshot" \
                           $diskspecs \
                           --disk-only --atomic \
  || exit 1
}

copy_disks() {
  # Make a copy of the disks snapshots.
  VM="$1"
  echo "Copying snapshot disks to '$TARGETDIR' ..."
  # disks may have different names than the VM! extract names from domblklist!
  for file in $(get_snapshot_backing_files "$VM") ; do
    echo "  $file"
    # --archive = keep file properties (ownership etc)
    # --sparse  = make small copies
    rsync --archive --sparse "$file" "$TARGETDIR"
  done
}

remove_vm_snapshot() {
  VM="$1"
  success=''
  # For each block device, commit the changes in the overlay into the backing store.
  for blockdev in $(get_block_devs "$VM") ; do
    virsh blockcommit "$VM" $blockdev --active --verbose --wait --pivot \
    || exit 1
  done
  # Now delete the snapshot.
  virsh snapshot-delete --domain "$VM" --metadata "$VM-snapshot" \
  || exit 1
  # Print a list of the current status.
  echo "Cleaning up committed overlay files..."
  files_in_use=$(virsh dumpxml $VM | awk -F  "'" '/<source file=.*/ {print $2}')
  for overlayfile in $(virsh domblklist "$VM" --details \
                       | awk '$2 == "disk" {print $4}' \
                       | sed -e "s/\.\(qcow2\|img\)$/$SUFFIX.\1/")
  do
    # But first: test if the file is in use by the VM!
    if fgrep "$overlayfile" <<<"$files_in_use" ; then
      echo "ERROR: file '$overlayfile' is still referred to in the description of $VM. Please check 'virsh dumpxml $VM'"
      echo "Not deleting '$overlayfile'."
    else
      echo "  $overlayfile"
      rm -f "$overlayfile"
    fi
  done
  virsh domblklist "$VM" --details
}

##############################################################
#   Main - start working here
##############################################################

# Did we get a single VM name, or a --all request?
if [ -n "$ALL" ]; then
    VMLIST=$(virsh list | awk '/running/ {print $2}')
elif [ -n "$SINGLE" ]; then
    VMLIST="$SINGLE"
fi

# Does the TARGETDIR exists?
if [ ! -d "$TARGETDIR" ]; then
    mkdir -p "$TARGETDIR"
fi

for VM in $VMLIST ; do
    # Check of VM is on exclude list
    if [ -n "$EXCLUDED_VMS" ] && echo "$EXCLUDED_VMS" | grep --silent "^$VM$" ; then
        echo "Excluding VM '$VM'."
        continue
    fi

    # Start backup job
    copy_xml "$VM"
    # When script is interrupted, pivot back to original state.
    trap "remove_vm_snapshot '$VM'" EXIT
    create_vm_snapshot "$VM"
    copy_disks "$VM"
    # We're pivoting back to original state; catching exit no longer needed.
    trap - EXIT
    remove_vm_snapshot "$VM"
done
